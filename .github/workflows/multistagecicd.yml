#   AZURE_CLIENT_ID 
#   AZURE_TENANT_ID 
#   AZURE_SUBSCRIPTION_ID 

# - name: Login
#   uses: azure/login@v2
#   with:
#     client-id: ${{ secrets.AZURE_CLIENT_ID }}
#     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

# runs-on: ubuntu-latest
# permissions:
#   id-token: write
#   contents: read


name: aura/MultiStageCICD
on:
  push:
    branches:
    - main
env:
  BuildConfiguration: Release
  BuildParameters_RestoreBuildProjects: "./src/src.sln"
  BuildParameters_TestProjects: "./src/**/*[Tt]ests/*.csproj"
  app_BuildProjects: "./src/Aura.Web/Aura.Web.csproj"
  isMain: "$[eq(variables['Build.SourceBranch'], 'refs/heads/main')]"
  productionEnvironmentName: auraProductionEnvironment
  resourceGroup: rg-aura-azdo
  serviceConnection: aura-web
  stagingSlotName: staging
  validationEnvironmentName: auraValidationEnvironment
  validationSlotName: test
  webAppName: aura-web-400
jobs:
  build-CI:
    name: CI
    runs-on: ubuntu-latest
    env:
      appProjectPath: "./src/Aura.Web/Aura.Web.csproj"
      buildConfiguration: Release
      solutionPath: "./src/src.sln"
      testProjectPath: "./src/Aura.Web.Tests/Aura.Web.Tests.csproj"
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 1
    - name: Install .NET 9.x SDK
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 9.x
    - name: Restore NuGet packages
      run: dotnet restore ${{ env.solutionPath }}
    - name: Build the project
      run: dotnet build ${{ env.solutionPath }} --configuration ${{ env.buildConfiguration }} --no-restore
    - name: Run tests with coverage threshold
      run: dotnet test ${{ env.testProjectPath }} --logger trx --results-directory "${{ runner.temp }}" --configuration ${{ env.buildConfiguration }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Threshold=25 /p:ThresholdType=line
    - name: Upload Code Coverage Report
      uses: coverallsapp/github-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build-LintBicep:
    name: Lint Bicep Files
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Run Bicep Linter
      run: |-
        $ErrorActionPreference = 'stop'
        az bicep build --file ./infra/main.bicep
        if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }
      shell: pwsh
  build-Publish:
    name: Publish
    needs:
    - build-CI
    - build-LintBicep
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 1
    - name: Install .NET 9.x SDK
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 9.x
    - name: Production Complilation
      run: dotnet publish ${{ env.app_BuildProjects }} -c Release -o ${{ runner.temp }}
      
    - name: Upload Artifact
      if: success() || failure()
      uses: actions/upload-artifact@v4.1.0
      with:
        name: app
        path: "${{ runner.temp }}"
    - name: Upload infra folder
      uses: actions/upload-artifact@v4.1.0
      with:
        name: infra
        path: "./infra"
  deployToValidation-DeployToStaging:
    name: Deploy To test
    needs:
    - build-Publish
    runs-on: ubuntu-latest
    outputs:
      webAppName: ${{ steps.DeployBicep.outputs.webAppName }}
      webAppUrl: ${{ steps.DeployBicep.outputs.webAppUrl }}
      location: ${{ steps.DeployBicep.outputs.location }}
      resourceGroupName: ${{ steps.DeployBicep.outputs.resourceGroupName }}
      resourceGroupId: ${{ steps.DeployBicep.outputs.resourceGroupId }}
      
    permissions:
      id-token: write
      contents: read
    environment:
      name: test
    steps:

    - name: Download bicep
      uses: actions/download-artifact@v4
      with:
        name: infra
        path: "${{ runner.workspace }}/infra/"
        
    - name: Download application
      uses: actions/download-artifact@v4
      with:
        name: app
        path: "${{ runner.workspace }}/app/"
        
    - name: Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Deploy Bicep
      id: DeployBicep
      run: pwsh -File "${{ runner.workspace }}/infra/deploy.ps1"
      shell: pwsh
      working-directory: "${{ runner.workspace }}/infra/"
      
    - name: Print Environment Variables
      run: printenv
      shell: bash

    - name: Deploy App To Test
      uses: azure/webapps-deploy@v3.0.0
      env:
        webAppName: ${{ steps.DeployBicep.outputs.webAppName }}
      with:
        app-name: "${{ env.webAppName }}"
        package: "${{ runner.workspace }}/app/"

  deployToProd-webDeployToProd:
    name: Deploy To Prod
    needs:
    - deployToValidation-DeployToStaging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: prod
    if: github.ref == 'refs/heads/main'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: download artifact
      uses: actions/download-artifact@v4.1.0
      with:
        name: app
        path: "${{ runner.workspace }}/app/"
      
      
    - name: Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/webapps-deploy@v3.0.0
      with:
        app-name: "${{ env.webAppName }}"
        package: "${{ runner.workspace }}/app/" 
        slot-name: "${{ env.stagingSlotName }}"
    - uses: azure/cli@v1.0.8
      with:
        inlineScript: az webapp deployment slot swap --name "${{ env.webAppName }}" --resource-group "${{ env.resourceGroup }}" --subscription "${{ env.serviceConnection }}" --slot "${{ env.stagingSlotName }}" --preserve-vnet false
