name: yaml-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
   include:
     - main

pool:
  vmImage: ubuntu-latest

variables:
- name: BuildParameters.RestoreBuildProjects
  value: './src/src.sln'

- name: BuildParameters.TestProjects
  value: './src/**/*[Tt]ests/*.csproj'

- name: app.BuildProjects
  value: './src/Aura.Web/Aura.Web.csproj'

- name: BuildConfiguration
  value: 'Release'

- name: serviceConnection
  value: 'aura-web'

- name: validationEnvironmentName
  value: 'auraValidationEnvironment'

- name: productionEnvironmentName
  value: 'auraProductionEnvironment'

- name: resourceGroup
  value: 'rg-aura-azdo'

- name: webAppName
  value: 'aura-web-400'

- name: validationSlotName
  value: 'test'

- name: stagingSlotName
  value: 'staging'

-  name: isMain
   value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]  # Set to true only for the main branch

stages:
  - stage: build
    jobs:
    - job: CI
      displayName: CI
      variables:
        buildConfiguration: 'Release'
        solutionPath: './src/src.sln'
        testProjectPath: './src/Aura.Web.Tests/Aura.Web.Tests.csproj'
        appProjectPath: './src/Aura.Web/Aura.Web.csproj'

      steps:
      - checkout: self
        clean: true
        fetchDepth: 1
      - task: UseDotNet@2
        displayName: 'Install .NET 9.x SDK'
        inputs:
          packageType: 'sdk'
          version: '9.x'
      - task: DotNetCoreCLI@2
        displayName: 'Restore NuGet packages'
        inputs:
          command: 'restore'
          projects: '$(solutionPath)'
      - task: DotNetCoreCLI@2
        displayName: 'Build the project'
        inputs:
          command: 'build'
          projects: '$(solutionPath)'
          arguments: '--configuration $(buildConfiguration) --no-restore'
      - task: DotNetCoreCLI@2
        displayName: 'Run tests with coverage threshold'
        inputs:
          command: 'test'
          projects: '$(testProjectPath)'
          publishTestResults: true
          arguments: >
            --configuration $(buildConfiguration)
            /p:CollectCoverage=true
            /p:CoverletOutputFormat=cobertura
            /p:Threshold=25
            /p:ThresholdType=line
      - task: PublishCodeCoverageResults@2
        displayName: 'Publish code coverage'
        inputs:
          summaryFileLocation: ./src/Aura.Web.Tests/coverage.cobertura.xml

    - job: LintBicep
      displayName: 'Lint Bicep Files'
      dependsOn: CI
      steps:
        - task: AzureCLI@2
          displayName: 'Run Bicep Linter'
          inputs:
            azureSubscription: '$(serviceConnection)'
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az bicep build --file ./infra/main.bicep
    
    

    - job: Publish
      displayName: Publish
      dependsOn: CI
      steps:
      - checkout: self
        fetchDepth: 1

      - task: DotNetCoreCLI@2
        displayName: Production Complilation
        inputs:
          command: 'publish'
          publishWebProjects: true
          projects: $(app.BuildProjects)
          arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'

      - task: PublishPipelineArtifact@1
        displayName: Upload Artifact
        condition: succeededOrFailed()
        inputs:
          targetPath: '$(build.artifactstagingdirectory)'
          artifact: 'app'
          publishLocation: 'pipeline'

      - task: PublishPipelineArtifact@1
        displayName: 'Upload infra folder'
        inputs:
          targetPath: './infra'
          artifact: 'infra'
          publishLocation: 'pipeline'

  - stage: deployToValidation
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy To ${{ variables.validationSlotName }} slot'
        environment: $(validationEnvironmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                
                - task: AzureCLI@2
                  name: DeployBicep
                  displayName: Deploy Bicep

                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptLocation: scriptPath
                    scriptType: pscore
                    scriptPath: '$(Agent.BuildDirectory)/infra/deploy.ps1'
                    workingDirectory: '$(Agent.BuildDirectory)/infra/'
                  
                - bash: printenv
                  displayName: 'Print Environment Variables'
                    
                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy App To Test
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: '$(serviceConnection)'
                    appType: 'webAppLinux'
                    WebAppName: '$(DeployBicep.webAppName)'
                    deployToSlotOrASE: false
                    ResourceGroupName: '$(DeployBicep.resourceGroup)'
                    packageForLinux: '$(Agent.BuildDirectory)/app/*.zip'
                    

  - stage: deployToProd
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    dependsOn: deployToValidation
    jobs:
      - deployment: webDeployToProd
        displayName: Deploy To Prod
        environment: $(productionEnvironmentName)
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: '$(serviceConnection)'
                  appType: 'webApp'
                  WebAppName: '$(webAppName)'
                  deployToSlotOrASE: true
                  ResourceGroupName: '$(resourceGroup)'
                  SlotName: '$(stagingSlotName)'
                  packageForLinux: '$(Agent.BuildDirectory)/app/*.zip'

              - task: AzureAppServiceManage@0
                inputs:
                  azureSubscription: '$(serviceConnection)'
                  Action: 'Swap Slots'
                  WebAppName: '$(webAppName)'
                  ResourceGroupName: '$(resourceGroup)'
                  SourceSlot: '$(stagingSlotName)'